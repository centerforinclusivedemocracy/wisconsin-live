#!/bin/env python
"""
Compile script for ccep-frontend, to join header + eachpage + footer OR delete these build artifacts

To compile src/* into the web-ready HTML, JS, CSS:
python compile.py

To delete the web-ready HTML, JS, CSS files:
python compile.py clean
"""

# the list of src/*.html pages
# each one must have a corresponding .js and .css file
PAGES = [
    'index',
    'accessibility',
    'acknowledgments',
    'county',
    'methodology',
]

# the list of stylesheets which will be joined to create the shared sitewide.css
SITEWIDE_STYLESHEETS = [
    'sitewide_globalfont',
    'sitewide_header',
    'sitewide_navbar',
    'sitewide_footer',
    'sitewide_buttons',
    'sitewide_maphacks',
    'sitewide_tooltips',
    'sitewide_busymodal',
]
SITEWIDE_JAVASCRIPTS = [
    'sitewide',
    'polyfills',
]

# a message prepended to the generated files to remind folks not to make edits to them; it's an easy mistake to make
DONOTEDIT_MESSAGE = "THIS FILE WAS GENERATED BY compile.py AND SHOULD NOT BE MANUALLY EDITED"
DONOTEDIT_MESSAGE_CSS = "/**\r\n * {}\r\n **/\r\n\r\n".format(DONOTEDIT_MESSAGE)
DONOTEDIT_MESSAGE_JS = "/**\r\n * {}\r\n **/\r\n\r\n".format(DONOTEDIT_MESSAGE)
DONOTEDIT_MESSAGE_HTML = "<!--\r\n{}\r\n-->\r\n\r\n".format(DONOTEDIT_MESSAGE)


####################################################################################################


import os.path
import sys
import argparse
import datetime
import hashlib
import re


def createEverything():
    createSitewideCss()
    createSitewideJs()
    createJoinedPages()
    createCacheBusting()


def createSitewideCss():
    outfilename = os.path.join('.', 'sitewide.css')
    print("Creating {}".format(outfilename))

    with open(outfilename, 'w') as outfile:
        outfile.write(DONOTEDIT_MESSAGE_CSS)

        for filename in SITEWIDE_STYLESHEETS:
            filename = os.path.join('src', filename + '.css')
            print("    {}".format(filename))
            with open(filename) as infile:
                outfile.write(infile.read())


def createSitewideJs():
    outfilename = os.path.join('.', 'sitewide.js')
    print("Creating {}".format(outfilename))

    with open(outfilename, 'w') as outfile:
        outfile.write(DONOTEDIT_MESSAGE_JS)

        for filename in SITEWIDE_JAVASCRIPTS:
            filename = os.path.join('src', filename + '.js')
            print("    {}".format(filename))
            with open(filename) as infile:
                outfile.write(infile.read())


def createJoinedPages():
    for pagename in PAGES:
        outfilename_html = os.path.join('.', pagename + '.html')
        outfilename_js = os.path.join('.', pagename + '.js')
        outfilename_css = os.path.join('.', pagename + '.css')

        infiles_html = [ 'header.html', pagename + '.html', 'footer.html', ]
        infiles_js = [ pagename + '.js', ]
        infiles_css = [ pagename + '.css', ]

        print("Creating {}".format(outfilename_html))

        with open(outfilename_html, 'w') as outfile:
            for filename in infiles_html:
                filename = os.path.join('src', filename)
                print("    {}".format(filename))
                with open(filename) as infile:
                    outfile.write(infile.read())

        with open(outfilename_js, 'w') as outfile:
            outfile.write(DONOTEDIT_MESSAGE_JS)

            for filename in infiles_js:
                filename = os.path.join('src', filename)
                print("    {}".format(filename))
                with open(filename) as infile:
                    outfile.write(infile.read())

        with open(outfilename_css, 'w') as outfile:
            outfile.write(DONOTEDIT_MESSAGE_CSS)

            for filename in infiles_css:
                filename = os.path.join('src', filename)
                print("    {}".format(filename))
                with open(filename) as infile:
                    outfile.write(infile.read())

        with open(outfilename_html) as infile:
            html = infile.read()
            html = html.replace('THISPAGE.css', "{}.css".format(pagename))
            html = html.replace('THISPAGE.js', "{}.js".format(pagename))
        with open(outfilename_html, 'w') as outfile:
            outfile.write(html)


def createCacheBusting():
    print("Cache-busting")
    for pagename in PAGES:
        outfile_html = os.path.join('.', pagename + '.html')
        print("    {}".format(outfile_html))

        with open(outfile_html) as infile:
            html = infile.read()

        cachetags = re.findall('(([\w\.]+)\?CACHEBUST)', html)
        for tag in cachetags:
            targetfilename = os.path.join('.', tag[1])
            with open(targetfilename) as targetfile:
                targetcontent = targetfile.read()
                cachebuster = 'cachebust-' + hashlib.sha256(targetcontent).hexdigest()[:10]  # this changes only if the file content has changed, NOT counting cache-buster tags            
                oldtag = tag[0]
                newtag = tag[0].replace('CACHEBUST', cachebuster)
                html = html.replace(oldtag, newtag)

        with open(outfile_html, 'w') as outfile:
            outfile.write(html)


def deleteEverything():
    deleteSitewideCssAndJs()
    deleteJoinedPages()


def deleteSitewideCssAndJs():
    filestodelete = ('sitewide.css', 'sitewide.js')

    for filename in filestodelete:
        print("Deleting {}".format(filename))
        if os.path.exists(filename):
            os.unlink(filename)


def deleteJoinedPages():
    filestodelete = []
    for pagename in PAGES:
        filestodelete.append(os.path.join('.', pagename + '.html'))
        filestodelete.append(os.path.join('.', pagename + '.js'))
        filestodelete.append(os.path.join('.', pagename + '.css'))

    for filename in filestodelete:
        print("Deleting {}".format(filename))
        if os.path.exists(filename):
            os.unlink(filename)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--build", help="create the web-ready HTML/JS/CSS files", action='store_true')
    parser.add_argument("--clean", help="delete the compiled web-ready HTML/JS/CSS files", action='store_true')
    args = parser.parse_args()

    if not args.build and not args.clean:
        parser.print_help()
        sys.exit(0)

    if args.build:
        createEverything()
    elif args.clean:
        deleteEverything()

    print("DONE")
